# -*- coding: cp1251 -*-
from __future__ import division
import nltk, re, pprint
#1. Описати, які класи стрічок відповідають наступному регулярному виразу.[a-zA-Z]+.
#Результати перевірити використовуючи nltk.re_show()
a='''By Larry Bleiberg 20 October 2015. One hectic morning, early in my marriage, I was driving my father-in-law to the airport. While navigating the snarling highway traffic, my mind looped through to-do lists, calculating how long it would take to drop him off, say goodbye and make it cross-town to the office. Then a jet glided silently over the road like a giant heron, about to touch down at Dallas-Fort Worth Airport.
"It's magic," my father-in-law said, interrupting my restless thoughts. I looked at him, confused.'''
nltk.re_show('[a-zA-Z]+', a)
print 'Vysnovok: Takomu vyrazu ([a-zA-Z]+) vidpovidaiut strichky z velykyh abo malyh liter dovilnoi dovzhyny, ne vrahovuiuchy tsyfry ta rozdilovi znaky'
print ####################################
#2. Описати, які класи стрічок відповідають наступному регулярному виразу. [A-Z][a-z]*.
#Результати перевірити використовуючи nltk.re_show()
b='''By Larry Bleiberg 20 October 2015. One hectic morning, early in my marriage, I was driving my father-in-law to the airport. While navigating the snarling highway traffic, my mind looped through to-do lists, calculating how long it would take to drop him off, say goodbye and make it cross-town to the office. Then a jet glided silently over the road like a giant heron, about to touch down at Dallas-Fort Worth Airport.
"It's magic," my father-in-law said, interrupting my restless thoughts. I looked at him, confused.'''
nltk.re_show('[A-Z][a-z]*', b)
print 'Vysnovok: Takomu vyrazu ([A-Z][a-z]*) vidpovidaiut strichky, yaki pochynaiutsia z velykoii bukvy'
print ####################################
#3. Описати, які класи стрічок відповідають наступному регулярному виразу. \d+(\.\d+)?.
#Результати перевірити використовуючи nltk.re_show()
c='''By Larry Bleiberg 20 October 2015. One hectic morning, early in my marriage, I was driving my father-in-law to the airport. While navigating the snarling highway traffic, my mind looped through to-do lists, calculating how long it would take to drop him off, say goodbye and make it cross-town to the office. Then a jet glided silently over the road like a giant heron, about to touch down at Dallas-Fort Worth Airport.
"It's magic," my father-in-law said, interrupting my restless thoughts. I looked at him, confused. It was -20. It costed $257.90. It took 1/4.'''
nltk.re_show('\d+(\.\d+)?', c)
print "Vysnovok: Takomu vyrazu (\d+(\.\d+)?) vidpovidaiut strichky, yaki mistiat cili dodatni chysla ta chusla pislia krapky, drobovi cherez 'slash' rozpiznaie yak okremi chysla."
print ####################################
#4. Описати, які класи стрічок відповідають наступному регулярному виразу. ([^aeiou][aeiou][^aeiou])*.
#Результати перевірити використовуючи nltk.re_show()
d='Five Britons were killed when a whale-watching boat sank off the coast of western Canada, UK Foreign Secretary Philip Hammond has said. The boat carrying 27 people sank near Tofino on Vancouver Island on Sunday.'
nltk.re_show('([^aeiou][aeiou][^aeiou])*', d)
print "Vysnovok: Takomu vyrazu ([^aeiou][aeiou][^aeiou])*) vidpovidaiut strichky, yaki mistiat taku poslidovnist z 3 elementiv 'not vowel-vowel-not vowel', de 'not vowel' mozhut buty yak prygolosni, tak i bud-yaki inshi symvoly"
print ####################################
#5. Описати, які класи стрічок відповідають наступному регулярному виразу. \w+|[^\w\s]+..
#Результати перевірити використовуючи nltk.re_show()
e='Emergency officials said 21 people had been rescued and one other person was still missing. The boat, Leviathan II, made a mayday call before sinking about 8 miles (12km) west of Tofino. Sea conditions at the time were reported to be calm.'
nltk.re_show('\w+|[^\w\s]+.', e)
print "Vysnovok: Takomu vyrazu (\w+|[^\w\s]+.) vidpovidaiut strichky, yaki skladaiutsia z dovilnoii kilkosti bukv abo cyfr (\w+), abo z dovilnoii kilkosti ne bukv, cyfr, probiliv ([^\w\s]+) i bud-yakoho symvolu (.)"
print ####################################
#6. Описати, які класи стрічок відповідають наступному регулярному виразу. p[aeiou]{,2}t
#Результати перевірити використовуючи nltk.re_show()
f='Canadian Prime Minister-designate Justin Trudeau thanked all those who participated in the rescue effort and offered his condolences to the victims and their families.'
nltk.re_show('p[aeiou]{,2}t', f)
print "Vysnovok: Takomu vyrazu (p[aeiou]{,2}t) vidpovidaie strichka, yaka skladaiutsia z 3 bukv, pershoiu yakoiu ie (p), 3 abo 4 bukvoiu ie (t),zalezhno vid kilkosti holosnyh mizh nymy, iakyh mozhe buty 0,1 abo 2"
print ####################################
#7. Написати регулярний вираз, який встановлює відповідність наступному класу стрічок: всі артиклі (a, an, the).
g="'I should probably make an appearance at a few of them.' A lot of the design houses gave parties in Paris, but Timmie O was not going to this year, which was something of a relief, and it was also why Jade and David were able to get away to London. Otherwise, they would have been stuck, working in Paris over the weekend..."
nltk.re_show('(An?)|(an?)|(The)|(the)', g)
print ####################################
#10. Зберегти довільний текст у файлі corpus.txt. Визначити функцію  для читання з цього файлу (назва файлу аргумент функції) і повертає стрічку, яка містить текст з файлу.
#Використовуючи nltk.regexp_tokenize() розробити токенізатор для токенізації різних типів виразів: грошові одиниці, дати, імена людей та організацій.
#Використовувати багаторядковий запис регулярного виразу з коментарями та «verbose flag».
f=open('C:\Python27\corpus2.txt')
text=f.read()
pattern=r'''(?x)
\$\d+(\.\d+)?       
| (\d{,2}\.\d{,2}\.\d{4})|\d{4}
| ([A-Z]\w+([\ -])?){2,}
| [A-Z]{2,}
'''
print nltk.regexp_tokenize(text, pattern)
print ####################################
#13. Напишіть програму, яка конвертує текст в Pig Latin. String->ingstray, idle->idleay.
#(Конвертація відбувається переміщенням приголосної або групи приголосних на початок слова та додаванням до слова ay ).
text= "As people around the world wondered if innovation at Apple had stopped with Steve Jobs, we want to share with you a snapshot of the genius’s life. How did Steve Jobs start? His life story is not a straight line, but more like a winding path. From his early years it’s clear that Jobs had no grand plan in the beginning. His search for himself took Jobs through India, Buddhism, psychedelic use, attempts to become an astronaut and start a computer company in the Soviet Union."
list=re.split(r'[\W+\.\,]', text)
def PigLatin(word):
    import re
    if word!='':
        cons=''
        a=re.findall('[aeiou]*[^aeiou]+$',word)
        #print a
        cons=''.join(a)
        #print cons
        word=re.sub(cons, '', word)
        word=cons+word+'ay'+' '
    else: word='. '
    return word
text=''
for word in list:
    text=text+''.join(PigLatin(word))
print text
print ####################################
#15. Прочитати Додаток А. Дослідити явища описані у Додатку А використовуючи корпуси текстів та метод findall()для пошуку в токенізованому тексті.
from nltk.corpus import gutenberg, brown, movie_reviews, inaugural, shakespeare, sinica_treebank, state_union, treebank, webtext
def best(f):
	a=[]
	b=[]
	for i in f.fileids():
		c=f.raw(i)
		a+=re.findall(r'as best as .{,4} can', c)
		b+=re.findall(r'as best .{,4} can', c)
	return a,b
print 'In gutenberg:', best(gutenberg)
print 'In brown:', best(brown)
print 'In movie_reviews:', best(movie_reviews)
print 'In inaugural:', best(inaugural)
print 'In shakespeare:', best(shakespeare)
print 'In sinica_treebank:', best(sinica_treebank)
print 'In state_union:', best(state_union)
print 'In treebank:', best(treebank)
print 'In webtext:', best(webtext)
c=[]
for i in best(movie_reviews):
	c+=i
for i in best(state_union):
	c+=i
for i in best(webtext):
	c+=i
str=''
for w in c:
	str+=' '+w
print 'Result:', str
d=re.findall('as best\s+\w+\s+can|as best as\s+\w+\s+\can', str)
fdist=nltk.FreqDist(d)
print 'Frequency result:', fdist.items()
