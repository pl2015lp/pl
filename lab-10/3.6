#6. Створити аналізатор по замовчуванню та набір юніграм і n-грам аналізаторів.
#Використовуючи backoff здійсніть тренування аналізаторів на частині корпуса з вправи 3.2.
#Дослідіть три різні комбінації поєднання цих аналізаторів.
#Перевірте точність роботи аналізаторів.
#Визначіть комбінацію аналізаторів з максимальною точністю аналізу.
#Змініть розмір даних на яких проводилось тренування.
#Повторіть експерименти для змінених даних для тренування.
#Результати порівняйти і пояснити.
a = nltk.corpus.brown.tagged_sents(categories='learned')
sent = nltk.corpus.brown.sents(categories='learned')[2000]
afsize=[-1,-2,-3]
for i in afsize:
	nltk.AffixTagger(a,affix_length=i, min_stem_length=3).tag(sent)
b = nltk.corpus.brown.tagged_sents(categories='adventure')
sent = nltk.corpus.brown.sents(categories='adventure')[1000]
afsize=[-1,-2,-3,-4,-5]
for i in afsize:
	nltk.AffixTagger(b, affix_length=i, min_stem_length=3).tag(sent)
default_tagger=nltk.DefaultTagger('NN')
unigram_tagger=nltk.UnigramTagger(a)
bigram_tagger = nltk.BigramTagger(a, cutoff=0)
affix_tagger = nltk.AffixTagger(a, affix_length=-2, min_stem_length=3)
t0=nltk.DefaultTagger('NN')
t1=nltk.UnigramTagger(a, backoff=t0)
t2=nltk.BigramTagger(a, backoff=t1)
t3=nltk.AffixTagger(a, backoff=t2)
print t3.evaluate(a)
print t3.evaluate(b)
t0=nltk.UnigramTagger(a, backoff=t0)
t1=nltk.BigramTagger(a, backoff=t1)
t2=nltk.AffixTagger(a, backoff=t2)
t3=nltk.DefaultTagger('NN')
print t3.evaluate(a)
print t3.evaluate(b)
t0=nltk.DefaultTagger('NN')
t1=nltk.UnigramTagger(a, backoff=t0)
t2=nltk.AffixTagger(a, backoff=t1)
t3=nltk.BigramTagger(a, backoff=t2)
print t3.evaluate(a)
print t3.evaluate(b)
print
