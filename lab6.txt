Описати, які класи стрічок відповідають наступному регулярному виразу. [a-zA-Z]+. Результати перевірити використовуючи nltk.re_show( ).
from __future__ import division
import nltk, re, pprint
f = open ('d://text.txt')
raw = f.read ()
nltk.re_show ('[a-zA-Z]+', raw) Виділяє всі слова, які складаються з літер, але не виділяє цифри і розділові знаки.
Описати, які класи стрічок відповідають наступному регулярному виразу. [A-Z][a-z]*. Результати перевірити використовуючи nltk.re_show()
from __future__ import division
import nltk, re, pprint
f = open ('d://text.txt')
raw = f.read ()
nltk.re_show ('[A-Z][a-z]*', raw) Виділяє лише слова, які починаються з великої літери.
Описати, які класи стрічок відповідають наступному регулярному виразу. \d+(\.\d+)?. Результати перевірити використовуючи nltk.re_show()
from __future__ import division
import nltk, re, pprint
f = open ('d://text.txt')
raw = f.read ()
nltk.re_show ('\d+(\.\d+)?', raw) Виділяє послідовність цифр
Описати, які класи стрічок відповідають наступному регулярному виразу. ([^aeiou][aeiou][^aeiou])*. Результати перевірити використовуючи nltk.re_show()
from __future__ import division
import nltk, re, pprint
f = open ('d://text.txt')
raw = f.read ()
nltk.re_show ('([^aeiou][aeiou][^aeiou])*', raw) Виділяється послідовності символів, що складаються з трьох символів, перший і третій з яких не є голосною, а другий – будь-яка голосна з [aeiou] і зустрічаються 0 і більше разів.

Описати, які класи стрічок відповідають наступному регулярному виразу. \w+|[^\w\s]+.. Результати перевірити використовуючи nltk.re_show()
from __future__ import division
import nltk, re, pprint
f = open ('d://text.txt')
raw = f.read ()
nltk.re_show ('\w+|[^\w\s]+.', raw) Виділяє всі слова, цифри та символи
Написати регулярний вираз, який встановлює відповідність наступному класу стрічок: всі артиклі (a, an, the).
import nltk, re, pprint
from nltk.corpus import gutenberg
wordlist=nltk.Text(gutenberg.words('melville-moby_dick.txt'))
articles=wordlist.findall(r"<a>|<an>|<the>")
print articles
Зберегти довільний текст у файлі corpus.txt. Визначити функцію  для читання з цього файлу (назва файлу аргумент функції) і повертає стрічку, яка містить текст з файлу. Використовуючи nltk.regexp_tokenize() розробити токенізатор для токенізації різних типів виразів: грошові одиниці, дати, імена людей та організацій. Використовувати багаторядковий запис регулярного виразу з коментарями та «verbose flag».
import nltk, re
def load (f)
	text=open(f)
	raw=text.read()
	return raw
text=load('C:\Documents\Github\corpus.txt')
print text
pattern=r'''(?x)
([A-Z]\.)+
|\d+([./-]\d+){2}
|\$?\d+(\.\d+)?
|[A-Z][a-z]+\s([A-Z]\.)+
|[A-Z]\w+\s([A-Z]\w+)+'''
res=nltk.regexp_tokenize(text, pattern)
print res
Напишіть програму, яка конвертує текст в Pig Latin. String->ingstray, idle->idleay. (Конвертація відбувається переміщенням приголосної або групи приголосних на початок слова та додаванням до слова ay ).
 import nltk, re
 from nltk.corpus import gutenberg
 def latin(w):
	piece=re.findall(regexp, w)
	pos=len(piece[0])
	new=w[pos:] + piece[0] + 'ay'
	return new
raw=gutenberg.raw('austen-sense.txt')
text=re.split(r'[W\d]+', raw)
print text[:20]
regexp=r'^[^AEIOUaeiou]*'
pig_latin=[]
for word in text:
	pig_latin.append(latin(word))
print pig_latin[:20]