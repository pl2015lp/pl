Завдання1
import nltk
def traverse(t):
	try:
		t.node
	except AttributeError:
		print t,
	else:#Now we kmow that t.node is defined
		print '(', t.node,
		glybyna=0
		for child in t:
			glybyna=glybyna+1
			print glybyna
			traverse(child)
			print ')',
			
t = nltk.Tree('(S (NP Katie) (VP want (NP the toy)))')
print traverse(t)



Завдання4
import nltk.corpus
grammar2 = nltk.parse_cfg("""
S  -> NP VP
NP -> Det Nom | PropN|N
Nom -> Adj Nom | N
VP -> V Adj | V NP | V S | V NP PP|V PP
PP -> P NP
PropN -> 'Ann' | 'Katie' | 'Vitaliy'
Det -> 'the' | 'a'
N -> 'sunrise' | 'puppy' | 'tree' | 'fish' | 'life'|'Lee'|'home'
Adj  -> 'devious' | 'frightened' |  'strong' | 'tall'
V -> 'ran'| 'like'  | 'kiss' | 'said' | 'cheered' | 'was' | 'put'|'dance'
P -> 'on'|'away'
""")
rd_parser = nltk.RecursiveDescentParser(grammar2)
sent = "Lee ran away home".split()
for tree in rd_parser.nbest_parse(sent):
    print tree
grammar2 = nltk.parse_cfg("""
S  -> NP VP
NP -> Det Nom | PropN|N
TP -> PRO NP
IP -> PRO ADJ|PRO|PRO ADV
PC -> PRO PP
DP-> NP PRO NP
Nom -> Adj Nom | N
VP -> V Adj | V NP | V S | V NP PP|V PP
PP -> P NP
PropN -> 'Ann' | 'Katie' | 'Vitaliy'
Det -> 'the' | 'a'
N -> 'sunrise' | 'puppy' | 'tree' | 'fish' | 'life'|'Lee'|'home'
Adj  -> 'devious' | 'frightened' |  'strong' | 'tall'|'full'
ADV -> 'heavily'|'soon'|'already'
V -> 'ran'| 'walk'  | 'hug' | 'said' | 'love' | 'was' | 'put'
P -> 'on'|'away'|'up with'|'up'
""")
rd_parser = nltk.RecursiveDescentParser(grammar2)
rd_parser = nltk.RecursiveDescentParser(grammar2)
sent = "Lee ran away home".split()
for tree in rd_parser.nbest_parse(sent):
    print tree
	
	
Завдання5
import nltk.corpus
entries = nltk.corpus.ppattach.attachments('training')
table = nltk.defaultdict(lambda: nltk.defaultdict(set))
for entry in entries:
    key = entry.noun1 + '-' + entry.prep + '-' + entry.noun2
    table[key][entry.attachment].add(entry.verb)
for key in sorted(table):
    if len(table[key]) > 1:
        print key, 'N:', sorted(table[key]['N']), 'V:',
    sorted(table[key]['V'])		

	
Завдання8
import nltk
entries = nltk.corpus.ppattach.attachments('training')
table = nltk.defaultdict(lambda: nltk.defaultdict(set))
for entry in entries:
    key = entry.verb + '-' + entry.prep + '-' + entry.noun1
    table[key][entry.attachment].add(entry.verb)
for key in sorted(table):
    if len(table[key]) > 1:
        print key, 'V:', sorted(table[key]['N']), 'V:',
    sorted(table[key]['V'])	
	
	
Завдання12
from nltk.corpus import treebank
t = treebank.parsed_sents('wsj_0002.mrg')[0]
print t
t.productions()